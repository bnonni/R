library(shiny); runApp('Eureka 2.0. Master.R')
runApp('Eureka 2.0. Master.R')
runApp('Desktop/Eureka 2.0. Master.R')
runApp('Desktop/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/ShinyFunctions/UI-Starter.R')
library(shiny); runApp('Desktop/Test.R')
library(shiny); runApp('Desktop/Shiny_Part1.R')
install.packages('RcppRoll')
runApp('Desktop/Shiny_Part1.R')
runApp('Desktop/Shiny_Part1.R')
library(shiny); runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
library(shiny); runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
runApp('Desktop/Stage/eureka-repo/Eureka 2.0. Master.R')
library(shiny); runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
setwd('~/Desktop/Projects/Products/Eureka/')
proportion_file = read.csv('Sample_TraditionalTest_demo.csv')
proportion_file
setwd('~/Desktop/Projects/Products/Eureka/')
setwd('~/Desktop/Projects/Products/Eureka/')
setwd('/Desktop/Projects/Products/Eureka/')
proportion_file = read.csv('Sample_TraditionalTest_demo.csv')
proportion_file
setwd('~/Desktop/Projects/Products/Eureka/')
setwd('~/Desktop/Projects/Products/Eureka/')
setwd('~/Desktop/Projects/Products/Eureka/')
library(shiny); runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
runApp('Desktop/Products/Eureka/Eureka 2.0. Master.R')
setwd('~/Desktop/Products/Eureka/Datasets/')
proportion_file = read.csv('Sample_TraditionalTest_demo.csv')
proportion_file
propInputTable = function(data, dimension, metric)
{
input_tbl = data[data[, 1] == dimension, c(strsplit(metric, '/')[[1]][1], strsplit(metric, '/')[[1]][2])]
row.names(input_tbl) = data[ , 2][data[ , 1] == dimension]
return(input_tbl)
}
metric = "Clicks/Impressions"
dimensions = as.vector(unique(proportion_file$AdGroup))
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions)
{
print(dim)
print(propInputTable(proportion_file, dim, metric))
}
propTestingTable = function(data, dimension, metric)
{
input_tbl = data[data[, 1]== dimension, c(strsplit(metric, '/')[[1]][1], strsplit(metric, '/')[[1]][2])]
row.names(input_tbl) = data[ , 2][data[ , 1] == dimension]
proportion = input_tbl[ , 1]/input_tbl[ , 2]
names(proportion) = data[ , 2][data[ , 1] == dimension]
return(proportion)
}
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions)
{
print(dim)
print(propInputTable(proportion_file, dim, metric))
print(propTestingTable(proportion_file, dim, metric))
}
propPValue = PValue = function(input_tbl)
{
GeneralTest = chisq.test(input_tbl)
return(GeneralTest$p.value)
}
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions)
{
print(dim)
input_tbl = propInputTable(proportion_file, dim, metric)
prop_tbl = propTestingTable(proportion_file, dim, metric)
proportion_test = chisq.test(input_tbl)
print(proportion_test)
}
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions)
{
print(dim)
input_tbl = propInputTable(proportion_file, dim, metric)
prop_tbl = propTestingTable(proportion_file, dim, metric)
prop_test_results = chisq.test(input_tbl)
print(proportion_test)
}
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions[1])
{
print(dim)
input_tbl = propInputTable(proportion_file, dim, metric)
print(input_tbl)
prop_tbl = propTestingTable(proportion_file, dim, metric)
prop_test_results = chisq.test(input_tbl)
print(proportion_test)
}
prop.test(x=c(17865, 6074), n=c(230226, 109094), alternative = c('two.sided'), conf.level = .95, correct = TRUE)
library(fifer)
propPValue = PValue = function(input_tbl)
{
GeneralTest = prop.test(x = input_tbl[,1], n = input_tbl[,2])
return(GeneralTest$p.value)
}
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions[1])
{
print(dim)
input_tbl = propInputTable(proportion_file, dim, metric)
print(input_tbl)
prop_tbl = propTestingTable(proportion_file, dim, metric)
prop_test_results = chisq.test(input_tbl)
print(proportion_test)
}
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions[1])
{
print(dim)
input_tbl = propInputTable(proportion_file, dim, metric)
print(input_tbl)
prop_tbl = propTestingTable(proportion_file, dim, metric)
prop_test_results = propPValue(input_tbl)
print(prop_test_results)
}
propPValue = PValue = function(input_tbl)
{
GeneralTest = prop.test(x = input_tbl[,1], n = input_tbl[,2])
return(GeneralTest)
}
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions[1])
{
print(dim)
input_tbl = propInputTable(proportion_file, dim, metric)
print(input_tbl)
prop_tbl = propTestingTable(proportion_file, dim, metric)
prop_test_results = propPValue(input_tbl)
print(prop_test_results)
}
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions[1])
{
input_tbl = propInputTable(proportion_file, dim, metric)
prop_tbl = propTestingTable(proportion_file, dim, metric)
prop_test_results = propPValue(input_tbl)
print(prop_test_results)
print(prop_test_results$p.value)
}
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions[1])
{
input_tbl = propInputTable(proportion_file, dim, metric)
prop_tbl = propTestingTable(proportion_file, dim, metric)
prop_test_results = propPValue(input_tbl)
print(prop_test_results)
print(round(prop_test_results$p.value, 4))
}
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions[1])
{
input_tbl = propInputTable(proportion_file, dim, metric)
prop_tbl = propTestingTable(proportion_file, dim, metric)
prop_test_results = propPValue(input_tbl)
print(prop_test_results)
print(round(prop_test_results$p.value, 5))
}
runApp('~/Desktop/Test.R')
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions[1])
{
input_tbl = propInputTable(proportion_file, dim, metric)
prop_tbl = propTestingTable(proportion_file, dim, metric)
prop_test_results = propPValue(input_tbl)
print(round(prop_test_results$p.value, 5))
}
propTest = function(input_tbl)
{
GeneralTest = prop.test(x = input_tbl[,1], n = input_tbl[,2])
return(GeneralTest)
}
dimensions = as.vector(unique(proportion_file$AdGroup))
for ( dim in dimensions[1])
{
input_tbl = propInputTable(proportion_file, dim, metric)
prop_tbl = propTestingTable(proportion_file, dim, metric)
prop_test_results = propPValue(input_tbl)
print(round(prop_test_results$p.value, 5))
}
ls()
