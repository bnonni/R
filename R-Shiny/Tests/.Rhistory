library(shiny); runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/UI-Starter.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/UI-Starter.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/UI-Starter.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/UI-Starter.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/UI-Starter.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/UI-Starter.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/UI-Starter.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/Eureka 2.0. Master.R')
library(shiny); runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/Eureka 2.0. Master.R')
runApp('ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/UI-Starter.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
library.package("stats")
library.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("stats")
install.packages("pwr")
pwr.chisq.test()
restart()
pwr.t.test()
pwr.t.test(n = 60, d = 0.2, sig.level = 0.10, type="one.sample", alternative="two.sided")
pwr.t.test(d=0.2,n=60,sig.level=0.10,type="one.sample",alternative="two.sided")
pwr.t.test(d=d,n=40,sig.level=0.05,type="paired",alternative="two.sided")
"***********************
T-Power Test
************************
___________________________________________________________________________________________________
pwr.t.test() -> Power calculations for t-tests of means (one sample, two samples and paired samples)
____________________________________________________________________________________________________
Description
Compute power of tests or determine parameters to obtain target power (similar to power.t.test).
Usage
pwr.t.test(n = NULL, d = NULL, sig.level = 0.05, power = NULL,
type = c('two.sample', 'one.sample', 'paired'),
alternative = c('two.sided', 'less', 'greater'))
Arguments
n -> Number of observations (per sample)
d -> Effect size (Cohen’s d) - difference between the means divided by the pooled standard deviation
sig.level -> Significance level (Type I error probability)
power -> Power of test (1 minus Type II error probability)
type -> Type of t test : one- two- or paired-samples
alternative -> a character string specifying the alternative hypothesis, must be one of 'two.sided'
(default), 'greater' or 'less'
Details
Exactly one of the parameters ’d’,’n’,’power’ and ’sig.level’ must be passed as NULL, and that
parameter is determined from the others. Notice that the last one has non-NULL default so NULL
must be explicitly passed if you want to compute it.
"
#import pwr library
library(pwr)
pwr.t.test(d=NULL,n=40,sig.level=0.05,type="paired",alternative="two.sided")
pwr.t.test(d=NULL,n=40,sig.level=0.05,type="paired",alternative="two.sided")
pwr.t.test(d=NULL,n=40,sig.level=0.05,type="paired",alternative="two.sided")
pwr.t.test(d=d,n=40,sig.level=0.05,type="paired",alternative="two.sided")
d<-8/(16*sqrt(2*(1-0.6)))
pwr.t.test(d=NULL,n=40,sig.level=0.05,type="paired",alternative="two.sided")
d<-8/(16*sqrt(2*(1-0.6)))
pwr.t.test(d=d,n=40,sig.level=0.05,type="paired",alternative="two.sided")
pwr.t.test(d=0.2,n=60,sig.level=0.10,type="one.sample",alternative="two.sided")
library(shiny); runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
ls
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
# BODY FUNCTION
body = dashboardBody(selectInput("entries", "Show entries", list(25, 50, 75, 100, 200, 500)), uiOutput("tb"))
"****************************************************
SIMPLE TREND DASHBOARD
DATE: JUNE 13th 2018
AUTHOR: BRYAN WALSER NONNI
****************************************************"
library(shiny)
library(shinydashboard)
# HEADER FUNCTION
header = dashboardHeader( title = "Simple Trend")
#SIDEBAR FUNCTION
sidebar = dashboardSidebar(
sidebarMenu(menuItem( text = "Upload Data",
icon = icon("user"),
tabName = "upload_dropdown",
fileInput("file", "Please Upload CSV")
),
menuItem( text = "Filters",
icon = icon("th"),
checkboxInput(inputId= "header", label = "Show Data Headers", value = FALSE),
checkboxInput(inputId= "stringsAsFactors", label = "Strings as Factors", value = FALSE),
radioButtons(inputId = "sep", label = "Seperator", choices = c(Comma=",", Semicolon=";",Tab="\t",Space=" "), selected = ","),
br()
),
menuItem( text = "T-power Test",
icon = "superpowers"
)
)
)
# BODY FUNCTION
body = dashboardBody(selectInput("entries", "Show entries", list(25, 50, 75, 100, 200, 500)), uiOutput("tb"))
#OPTIONS increase default file upload size
options(shiny.maxRequestSize = 9*1024^2)
# SERVER FUNCTION
server = function(input, output){
#this reactive function takes the inputs from the sidebar above and uses them for read.table() to read the data from the file
#file$datapath -> gives the path of the file
data <- reactive({
file1 <- input$file
if(is.null(file1)){return()}
read.table(file=file1$datapath, sep = input$sep, header = input$header, stringsAsFactors = input$stringsAsFactors)
})
#function outputs the dataset and displays the data summary in table format - returning the data frame which contains the file type and data path
output$filedf <- renderTable({
if(is.null(data())){return()}
input$file
})
#function ouputs the summary of the dataset and displays that summary in table format - returning the actual data summary
output$sum <- renderTable({
if(is.null(data())){return()}
summary(data())
})
#function returns the data in the table format
output$table <- renderTable({
if(is.null(data())){return()}
data()
})
output$entries <- renderText({
paste(input$entries)
})
#function renders the sidebar
output$tb <- renderUI({
tabsetPanel(tabPanel("Raw Data", tableOutput("table")), tabPanel("Testing 2", tableOutput("table")))
})
}
# SHINY APP
shinyApp( ui =  dashboardPage( header = header,
sidebar = sidebar,
body = body),
server = server)
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
library(shiny); runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/Eureka 2.0. Master.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/Eureka 2.0. Master.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/Eureka 2.0. Master.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/ShinyExercises/File-Upload-Dash-BN.R')
runApp('C:/Users/bryan.nonni/Desktop/R-Python/eureka-repo/Tests/Statistical Testing Dashboard.R')
